// Generated by Dagger (https://dagger.dev).
package com.example.torangrepository;

import com.example.torangrepository.services.ProductReportService;
import com.example.torangrepository.services.ReportService;
import com.example.torangrepository.services.ReportServiceModule;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ReportServiceModule_ProvideReportServiceFactory implements Factory<ReportService> {
  private final ReportServiceModule module;

  private final Provider<ProductReportService> productReportServiceProvider;

  public ReportServiceModule_ProvideReportServiceFactory(ReportServiceModule module,
      Provider<ProductReportService> productReportServiceProvider) {
    this.module = module;
    this.productReportServiceProvider = productReportServiceProvider;
  }

  @Override
  public ReportService get() {
    return provideReportService(module, productReportServiceProvider.get());
  }

  public static ReportServiceModule_ProvideReportServiceFactory create(ReportServiceModule module,
      Provider<ProductReportService> productReportServiceProvider) {
    return new ReportServiceModule_ProvideReportServiceFactory(module, productReportServiceProvider);
  }

  public static ReportService provideReportService(ReportServiceModule instance,
      ProductReportService productReportService) {
    return Preconditions.checkNotNullFromProvides(instance.provideReportService(productReportService));
  }
}
