// Generated by Dagger (https://dagger.dev).
package com.example.torangrepository.repository.impl;

import android.content.Context;
import com.example.torang_core.data.dao.LoggedInUserDao;
import com.example.torang_core.data.dao.MyReviewDao;
import com.example.torang_core.data.dao.UserDao;
import com.example.torang_core.datasource.local.MyReviewsLocalDataSource;
import com.example.torang_core.datasource.local.MyReviewsRemoteDataSource;
import com.example.torangrepository.services.RestaurantService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MyReviewsRepositoryImpl_Factory implements Factory<MyReviewsRepositoryImpl> {
  private final Provider<Context> contextProvider;

  private final Provider<RestaurantService> restaurantServiceProvider;

  private final Provider<UserDao> userDaoProvider;

  private final Provider<MyReviewDao> myReviewDaoProvider;

  private final Provider<LoggedInUserDao> loggedInUserDaoProvider;

  private final Provider<MyReviewsLocalDataSource> myReviewsLocalDataSourceProvider;

  private final Provider<MyReviewsRemoteDataSource> myReviewsRemoteDataSourceProvider;

  public MyReviewsRepositoryImpl_Factory(Provider<Context> contextProvider,
      Provider<RestaurantService> restaurantServiceProvider, Provider<UserDao> userDaoProvider,
      Provider<MyReviewDao> myReviewDaoProvider, Provider<LoggedInUserDao> loggedInUserDaoProvider,
      Provider<MyReviewsLocalDataSource> myReviewsLocalDataSourceProvider,
      Provider<MyReviewsRemoteDataSource> myReviewsRemoteDataSourceProvider) {
    this.contextProvider = contextProvider;
    this.restaurantServiceProvider = restaurantServiceProvider;
    this.userDaoProvider = userDaoProvider;
    this.myReviewDaoProvider = myReviewDaoProvider;
    this.loggedInUserDaoProvider = loggedInUserDaoProvider;
    this.myReviewsLocalDataSourceProvider = myReviewsLocalDataSourceProvider;
    this.myReviewsRemoteDataSourceProvider = myReviewsRemoteDataSourceProvider;
  }

  @Override
  public MyReviewsRepositoryImpl get() {
    return newInstance(contextProvider.get(), restaurantServiceProvider.get(), userDaoProvider.get(), myReviewDaoProvider.get(), loggedInUserDaoProvider.get(), myReviewsLocalDataSourceProvider.get(), myReviewsRemoteDataSourceProvider.get());
  }

  public static MyReviewsRepositoryImpl_Factory create(Provider<Context> contextProvider,
      Provider<RestaurantService> restaurantServiceProvider, Provider<UserDao> userDaoProvider,
      Provider<MyReviewDao> myReviewDaoProvider, Provider<LoggedInUserDao> loggedInUserDaoProvider,
      Provider<MyReviewsLocalDataSource> myReviewsLocalDataSourceProvider,
      Provider<MyReviewsRemoteDataSource> myReviewsRemoteDataSourceProvider) {
    return new MyReviewsRepositoryImpl_Factory(contextProvider, restaurantServiceProvider, userDaoProvider, myReviewDaoProvider, loggedInUserDaoProvider, myReviewsLocalDataSourceProvider, myReviewsRemoteDataSourceProvider);
  }

  public static MyReviewsRepositoryImpl newInstance(Context context,
      RestaurantService restaurantService, UserDao userDao, MyReviewDao myReviewDao,
      LoggedInUserDao loggedInUserDao, MyReviewsLocalDataSource myReviewsLocalDataSource,
      MyReviewsRemoteDataSource myReviewsRemoteDataSource) {
    return new MyReviewsRepositoryImpl(context, restaurantService, userDao, myReviewDao, loggedInUserDao, myReviewsLocalDataSource, myReviewsRemoteDataSource);
  }
}
