// Generated by Dagger (https://dagger.dev).
package com.example.torangrepository;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RestaurantServiceModule_ProvideRestaurantServiceFactory implements Factory<RestaurantService> {
  private final RestaurantServiceModule module;

  private final Provider<ProductRestaurantService> productRestaurantServiceProvider;

  public RestaurantServiceModule_ProvideRestaurantServiceFactory(RestaurantServiceModule module,
      Provider<ProductRestaurantService> productRestaurantServiceProvider) {
    this.module = module;
    this.productRestaurantServiceProvider = productRestaurantServiceProvider;
  }

  @Override
  public RestaurantService get() {
    return provideRestaurantService(module, productRestaurantServiceProvider.get());
  }

  public static RestaurantServiceModule_ProvideRestaurantServiceFactory create(
      RestaurantServiceModule module,
      Provider<ProductRestaurantService> productRestaurantServiceProvider) {
    return new RestaurantServiceModule_ProvideRestaurantServiceFactory(module, productRestaurantServiceProvider);
  }

  public static RestaurantService provideRestaurantService(RestaurantServiceModule instance,
      ProductRestaurantService productRestaurantService) {
    return Preconditions.checkNotNullFromProvides(instance.provideRestaurantService(productRestaurantService));
  }
}
