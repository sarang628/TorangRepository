// Generated by Dagger (https://dagger.dev).
package com.example.torangrepository.services;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FeedServiceModule_ProvideFeedServiceFactory implements Factory<FeedServices> {
  private final FeedServiceModule module;

  private final Provider<ProductFeedService> feedProductFeedServiceProvider;

  private final Provider<LocalFeedService> localFeedServiceProvider;

  public FeedServiceModule_ProvideFeedServiceFactory(FeedServiceModule module,
      Provider<ProductFeedService> feedProductFeedServiceProvider,
      Provider<LocalFeedService> localFeedServiceProvider) {
    this.module = module;
    this.feedProductFeedServiceProvider = feedProductFeedServiceProvider;
    this.localFeedServiceProvider = localFeedServiceProvider;
  }

  @Override
  public FeedServices get() {
    return provideFeedService(module, feedProductFeedServiceProvider.get(), localFeedServiceProvider.get());
  }

  public static FeedServiceModule_ProvideFeedServiceFactory create(FeedServiceModule module,
      Provider<ProductFeedService> feedProductFeedServiceProvider,
      Provider<LocalFeedService> localFeedServiceProvider) {
    return new FeedServiceModule_ProvideFeedServiceFactory(module, feedProductFeedServiceProvider, localFeedServiceProvider);
  }

  public static FeedServices provideFeedService(FeedServiceModule instance,
      ProductFeedService feedProductFeedService, LocalFeedService localFeedService) {
    return Preconditions.checkNotNullFromProvides(instance.provideFeedService(feedProductFeedService, localFeedService));
  }
}
